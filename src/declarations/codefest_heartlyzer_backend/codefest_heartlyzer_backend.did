// Chat message type definitions
type ChatRole = record {
  user : opt null;
  system : opt null;
};

type ChatMessage = record {
  role : ChatRole;
  content : text;
};

// Existing types
type AnalysisResult = record {
  risk_level : text;
  risk_percentage : float32;
  primary_factors : vec text;
  recommendations : vec text;
  timestamp : nat64;
};

type HealthData = record {
  age : nat32;
  gender : text;
  region : text;
  income_level : text;
  hypertension : bool;
  diabetes : bool;
  cholesterol_level : nat32;
  obesity : bool;
  waist_circumference : nat32;
  family_history : bool;
  smoking_status : text;
  alcohol_consumption : text;
  physical_activity : text;
  dietary_habits : text;
  air_pollution_exposure : text;
  stress_level : text;
  sleep_hours : float32;
  blood_pressure_systolic : nat32;
  blood_pressure_diastolic : nat32;
  fasting_blood_sugar : nat32;
  cholesterol_hdl : nat32;
  cholesterol_ldl : nat32;
  triglycerides : nat32;
  ekg_results : text;
  previous_heart_disease : bool;
  medication_usage : bool;
  participated_in_free_screening : bool;
  heart_attack : bool;
};

type PredictionInput = record {
  health_data : HealthData;
};

type PredictionResult = record {
  risk_level : text;
};

type Result = variant {
  Ok : AnalysisResult;
  Err : text;
};

type DatasetResult = variant {
  Ok : vec HealthData;
  Err : text;
};

// Generic result type for operations that may fail
type GenericResult = variant {
  Ok;
  Err : text;
};

// Service definition
service : {
  // Existing methods
  load_dataset : () -> (DatasetResult);
  train_and_predict : (HealthData) -> (PredictionResult);
  get_principal : () -> (text) query;
  
  // Prediction history methods (if you want to expose these)
  get_prediction_history : () -> (vec PredictionResult) query;
  delete_prediction_history : (nat64) -> (GenericResult);
  clear_prediction_history : () -> (GenericResult);
}
